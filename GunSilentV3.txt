local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local GunSilent = {
    Settings = {
        Enabled = { Value = false, Default = false },
        RangePlus = { Value = 200, Default = 200 },
        HitPart = { Value = "Head", Default = "Head" },
        BulletSpeed = { Value = 2500, Default = 2500 },
        UseFOV = { Value = true, Default = true },
        FOV = { Value = 120, Default = 120 },
        ShowCircle = { Value = true, Default = true },
        CircleMethod = { Value = "Center", Default = "Center", Options = {"Center", "Cursor"} },
        PredictVisual = { Value = true, Default = true },
        TrajectoryBeam = { Value = true, Default = true },
        BulletTrailsEnabled = { Value = false, Default = false },
        BulletTrailsFadeTime = { Value = 1, Default = 1 },
        BulletTrailsColor = { Value = Color3.fromRGB(147, 112, 219), Default = Color3.fromRGB(147, 112, 219) },
        HitChance = { Value = 100, Default = 100 },
        PredictionStrength = { Value = 1.5, Default = 1.5 },
        PingCompensation = { Value = 0.1, Default = 0.1 },
        SmoothingFactor = { Value = 0.1, Default = 0.1 },
        ResolverEnabled = { Value = true, Default = true },
        ResolverThreshold = { Value = 0.3, Default = 0.3 },
        PositionHistorySize = { Value = 30, Default = 30 },
        SortMethod = { Value = "Mouse&Distance", Default = "Mouse&Distance" },
        ShotgunSupport = { Value = false, Default = false },
        GenBullet = { Value = 4, Default = 4 },
        TestGenBullet = { Value = false, Default = false }
    },
    State = {
        LastEventId = 0,
        LastTool = nil,
        PredictVisualPart = nil,
        TrajectoryBeam = nil,
        TrajectoryAttachment0 = nil,
        TrajectoryAttachment1 = nil,
        FovCircle = nil,
        V_U_4 = nil,
        Connection = nil,
        OldFireServer = nil,
        PositionHistory = {},
        LastVisualUpdateTime = 0,
        LastTargetPosition = {},
        LocalCharacter = nil,
        LocalRoot = nil,
        LastTargetPos = nil,
        LastPredictionPos = nil,
        LastTargetUpdate = 0,
        TargetUpdateInterval = 0.2,
        LastFriendsList = nil,
        BulletTrails = {},
        TrailFadeConnections = {}
    }
}

local function safeNotify(notifyFunc, prefix, message, isImportant)
    if notifyFunc then
        local success, errorMsg = pcall(function()
            notifyFunc(prefix, message, isImportant)
        end)
        if not success then
            warn(string.format("[GunSilent] Notify failed: %s", errorMsg))
        end
    end
end

local function safeCreateInstance(className, properties)
    local success, result = pcall(function()
        local instance = Instance.new(className)
        if properties then
            for prop, value in pairs(properties) do
                instance[prop] = value
            end
        end
        return instance
    end)
    if success then
        return result
    else
        warn(string.format("[GunSilent] Failed to create %s: %s", className, result))
        return nil
    end
end

local function isGunTool(tool)
    local items = game:GetService("ReplicatedStorage"):FindFirstChild("Items")
    if not items then return false end
    local gunFolder = items:FindFirstChild("gun")
    if not gunFolder then return false end
    return gunFolder:FindFirstChild(tool.Name) ~= nil
end

local function isShotgun(tool)
    if not tool then return false end
    local ammoType = tool:GetAttribute("AmmoType")
    return ammoType and ammoType:lower() == "shotgun"
end

local function getGunRange(tool)
    if not tool or typeof(tool) ~= "Instance" or not tool:IsA("Tool") then
        return GunSilent.Settings.RangePlus.Value
    end
    local rangeValue = 0
    if GunSilent.Core and GunSilent.Core.GetEncryptedAttributeName then
        local encryptedRangeAttr = GunSilent.Core.GetEncryptedAttributeName("range")
        if encryptedRangeAttr then
            local attrValue = tool:GetAttribute(encryptedRangeAttr)
            if type(attrValue) == "number" then
                rangeValue = attrValue
            else
                safeNotify(GunSilent.notify, "GunSilent", "Error: Range attribute is not a number, using default (0)", true)
            end
        else
            safeNotify(GunSilent.notify, "GunSilent", "Error: Encrypted attribute name for 'range' is nil", true)
        end
    else
        safeNotify(GunSilent.notify, "GunSilent", "Error: GunSilent.Core or GunSilent.Core.GetEncryptedAttributeName is not available", true)
    end
    local rangePlus = GunSilent.Settings.RangePlus.Value
    if type(rangePlus) ~= "number" then
        safeNotify(GunSilent.notify, "GunSilent", "Error: RangePlus.Value is not a number, using default (0)", true)
        rangePlus = 0
    end
    return rangeValue + rangePlus
end

local function getBulletSpeed(tool)
    if not GunSilent.Core or not GunSilent.Core.GetEncryptedAttributeName then
        safeNotify(GunSilent.notify, "GunSilent", "Error: GunSilent.Core or GunSilent.Core.GetEncryptedAttributeName is not available for bullet speed", true)
        return GunSilent.Settings.BulletSpeed.Value
    end
    local encryptedBulletSpeedAttr = GunSilent.Core.GetEncryptedAttributeName("bullet_speed")
    local bulletSpeed = tool and tool:GetAttribute(encryptedBulletSpeedAttr) or GunSilent.Settings.BulletSpeed.Value
    return bulletSpeed
end

local function createBulletTrail(startPos, endPos)
    if not GunSilent.Settings.BulletTrailsEnabled.Value then return end

    local trail = safeCreateInstance("Beam", {
        Color = ColorSequence.new(GunSilent.Settings.BulletTrailsColor.Value),
        Width0 = 0.1,
        Width1 = 0.1,
        Transparency = NumberSequence.new(0),
        FaceCamera = true
    })
    if not trail then return end

    local attachment0 = safeCreateInstance("Attachment", { Position = startPos })
    local attachment1 = safeCreateInstance("Attachment", { Position = endPos })
    if not attachment0 or not attachment1 then
        trail:Destroy()
        return
    end

    attachment0.Parent = Workspace.Terrain
    attachment1.Parent = Workspace.Terrain
    trail.Attachment0 = attachment0
    trail.Attachment1 = attachment1
    trail.Parent = Workspace.Terrain

    table.insert(GunSilent.State.BulletTrails, trail)

    local fadeTime = GunSilent.Settings.BulletTrailsFadeTime.Value
    local startTime = tick()
    local connection = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        local transparency = elapsed / fadeTime
        if transparency >= 1 then
            trail:Destroy()
            attachment0:Destroy()
            attachment1:Destroy()
            connection:Disconnect()
        else
            trail.Transparency = NumberSequence.new(transparency)
        end
    end)

    table.insert(GunSilent.State.TrailFadeConnections, connection)

    if #GunSilent.State.BulletTrails > 50 then
        local oldestTrail = table.remove(GunSilent.State.BulletTrails, 1)
        local oldestConnection = table.remove(GunSilent.State.TrailFadeConnections, 1)
        if oldestTrail then oldestTrail:Destroy() end
        if oldestConnection then oldestConnection:Disconnect() end
    end
end

local lastTargetUpdate = 0

local function getNearestPlayer(gunRange)
    local currentTime = tick()
    if currentTime - lastTargetUpdate < GunSilent.State.TargetUpdateInterval then
        return GunSilent.Core.GunSilentTarget.CurrentTarget
    end
    lastTargetUpdate = currentTime

    if not GunSilent.State.LocalCharacter or not GunSilent.State.LocalRoot then
        return nil
    end

    local rootPos = GunSilent.State.LocalRoot.Position
    local nearestPlayer = nil
    local shortestDistance = gunRange
    local mousePos = UserInputService:GetMouseLocation()
    local camera = Workspace.CurrentCamera
    local friendsList = GunSilent.Core.Services.FriendsList or {}

    for _, player in pairs(Players:GetPlayers()) do
        if player == Players.LocalPlayer then continue end
        local playerName = player.Name:lower()
        if friendsList[playerName] then continue end

        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
            local targetRoot = character.HumanoidRootPart
            local distance = (rootPos - targetRoot.Position).Magnitude

            if distance <= shortestDistance then
                if GunSilent.Settings.UseFOV.Value then
                    local screenPos, onScreen = camera:WorldToViewportPoint(targetRoot.Position)
                    local fovRadius = GunSilent.Settings.FOV.Value
                    local centerPos = GunSilent.Settings.CircleMethod.Value == "Center" and Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2) or mousePos

                    if GunSilent.Settings.SortMethod.Value == "Mouse&Distance" then
                        local screenDistance = (Vector2.new(screenPos.X, screenPos.Y) - centerPos).Magnitude
                        local adjustedDistance = distance + (screenDistance / 100)
                        if onScreen and screenDistance <= fovRadius and adjustedDistance < shortestDistance then
                            nearestPlayer = player
                            shortestDistance = adjustedDistance
                        end
                    else
                        local screenDistance = (Vector2.new(screenPos.X, screenPos.Y) - centerPos).Magnitude
                        if onScreen and screenDistance <= fovRadius then
                            nearestPlayer = player
                            shortestDistance = distance
                        end
                    end
                else
                    nearestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end

    GunSilent.Core.GunSilentTarget.CurrentTarget = nearestPlayer
    return nearestPlayer
end

local function predictTargetPosition(target, bulletSpeed)
    if not target or not target.Character then return nil, nil end

    local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
    local targetHead = target.Character:FindFirstChild(GunSilent.Settings.HitPart.Value) or targetRoot
    if not targetRoot or not targetHead then return nil, nil end

    local myRoot = GunSilent.State.LocalRoot
    if not myRoot then return nil, nil end

    local distance = (targetHead.Position - myRoot.Position).Magnitude
    local timeToTarget = distance / bulletSpeed
    local pingDelay = GunSilent.Settings.PingCompensation.Value / 2
    local totalPredictionTime = timeToTarget + pingDelay

    local velocity = targetRoot.Velocity
    local predictedPosition = targetHead.Position + velocity * totalPredictionTime * GunSilent.Settings.PredictionStrength.Value

    if GunSilent.Settings.ResolverEnabled.Value then
        local history = GunSilent.State.PositionHistory[target] or {}
        table.insert(history, { Position = targetRoot.Position, Time = tick() })
        if #history > GunSilent.State.PositionHistorySize.Value then
            table.remove(history, 1)
        end
        GunSilent.State.PositionHistory[target] = history

        if #history >= 2 then
            local velocitySum = Vector3.new()
            local count = 0
            for i = 2, #history do
                local deltaPos = history[i].Position - history[i-1].Position
                local deltaTime = history[i].Time - history[i-1].Time
                if deltaTime > 0 then
                    local calculatedVelocity = deltaPos / deltaTime
                    if calculatedVelocity.Magnitude < GunSilent.Settings.ResolverThreshold.Value * velocity.Magnitude then
                        velocitySum = velocitySum + calculatedVelocity
                        count = count + 1
                    end
                end
            end
            if count > 0 then
                velocity = velocitySum / count
                predictedPosition = targetHead.Position + velocity * totalPredictionTime * GunSilent.Settings.PredictionStrength.Value
            end
        end
    end

    local direction = (predictedPosition - myRoot.Position).Unit
    if GunSilent.Settings.SmoothingFactor.Value > 0 then
        local lastPos = GunSilent.State.LastTargetPosition[target] or predictedPosition
        predictedPosition = lastPos:Lerp(predictedPosition, GunSilent.Settings.SmoothingFactor.Value)
        GunSilent.State.LastTargetPosition[target] = predictedPosition
        direction = (predictedPosition - myRoot.Position).Unit
    end

    return predictedPosition, direction
end

local function updateVisuals(target, predictedPos, direction)
    if not GunSilent.Settings.PredictVisual.Value and not GunSilent.Settings.TrajectoryBeam.Value then
        if GunSilent.State.PredictVisualPart then GunSilent.State.PredictVisualPart:Destroy() GunSilent.State.PredictVisualPart = nil end
        if GunSilent.State.TrajectoryBeam then GunSilent.State.TrajectoryBeam:Destroy() GunSilent.State.TrajectoryBeam = nil end
        if GunSilent.State.TrajectoryAttachment0 then GunSilent.State.TrajectoryAttachment0:Destroy() GunSilent.State.TrajectoryAttachment0 = nil end
        if GunSilent.State.TrajectoryAttachment1 then GunSilent.State.TrajectoryAttachment1:Destroy() GunSilent.State.TrajectoryAttachment1 = nil end
        return
    end

    local currentTime = tick()
    if currentTime - GunSilent.State.LastVisualUpdateTime < 0.05 then return end
    GunSilent.State.LastVisualUpdateTime = currentTime

    if GunSilent.Settings.PredictVisual.Value and predictedPos then
        if not GunSilent.State.PredictVisualPart then
            GunSilent.State.PredictVisualPart = safeCreateInstance("Part", {
                Size = Vector3.new(0.5, 0.5, 0.5),
                Shape = Enum.PartType.Ball,
                Anchored = true,
                CanCollide = false,
                Transparency = 0.5,
                Color = Color3.fromRGB(255, 0, 0),
                Parent = Workspace
            })
        end
        if GunSilent.State.PredictVisualPart then
            GunSilent.State.PredictVisualPart.Position = predictedPos
        end
    else
        if GunSilent.State.PredictVisualPart then
            GunSilent.State.PredictVisualPart:Destroy()
            GunSilent.State.PredictVisualPart = nil
        end
    end

    if GunSilent.Settings.TrajectoryBeam.Value and predictedPos and direction then
        if not GunSilent.State.TrajectoryBeam then
            GunSilent.State.TrajectoryAttachment0 = safeCreateInstance("Attachment")
            GunSilent.State.TrajectoryAttachment1 = safeCreateInstance("Attachment")
            GunSilent.State.TrajectoryBeam = safeCreateInstance("Beam", {
                FaceCamera = true,
                Width0 = 0.2,
                Width1 = 0.2,
                Transparency = NumberSequence.new(0.5),
                Color = ColorSequence.new(Color3.fromRGB(255, 0, 0)),
                Attachment0 = GunSilent.State.TrajectoryAttachment0,
                Attachment1 = GunSilent.State.TrajectoryAttachment1,
                Parent = Workspace
            })
        end
        if GunSilent.State.TrajectoryAttachment0 and GunSilent.State.TrajectoryAttachment1 and GunSilent.State.TrajectoryBeam then
            GunSilent.State.TrajectoryAttachment0.Position = GunSilent.State.LocalRoot.Position
            GunSilent.State.TrajectoryAttachment1.Position = predictedPos
            GunSilent.State.TrajectoryAttachment0.Parent = GunSilent.State.LocalRoot
            GunSilent.State.TrajectoryAttachment1.Parent = Workspace.Terrain
        end
    else
        if GunSilent.State.TrajectoryBeam then
            GunSilent.State.TrajectoryBeam:Destroy()
            GunSilent.State.TrajectoryBeam = nil
        end
        if GunSilent.State.TrajectoryAttachment0 then
            GunSilent.State.TrajectoryAttachment0:Destroy()
            GunSilent.State.TrajectoryAttachment0 = nil
        end
        if GunSilent.State.TrajectoryAttachment1 then
            GunSilent.State.TrajectoryAttachment1:Destroy()
            GunSilent.State.TrajectoryAttachment1 = nil
        end
    end
end

local function updateFovCircle()
    if not GunSilent.Settings.ShowCircle.Value or not GunSilent.Settings.UseFOV.Value then
        if GunSilent.State.FovCircle then
            GunSilent.State.FovCircle:Destroy()
            GunSilent.State.FovCircle = nil
        end
        return
    end

    if not GunSilent.State.FovCircle then
        GunSilent.State.FovCircle = safeCreateInstance("Part", {
            Shape = Enum.PartType.Cylinder,
            Anchored = true,
            CanCollide = false,
            Transparency = 0.8,
            Color = Color3.fromRGB(147, 112, 219),
            CastShadow = false,
            Parent = Workspace
        })
        local gui = Instance.new("SurfaceGui", GunSilent.State.FovCircle)
        gui.Face = Enum.NormalId.Top
        gui.SizingMode = Enum.SurfaceGuiSizingMode.FixedSize
        gui.CanvasSize = Vector2.new(100, 100)
        local frame = Instance.new("Frame", gui)
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundTransparency = 1
        local uiStroke = Instance.new("UIStroke", frame)
        uiStroke.Thickness = 2
        uiStroke.Color = Color3.fromRGB(147, 112, 219)
    end

    local camera = Workspace.CurrentCamera
    local centerPos = GunSilent.Settings.CircleMethod.Value == "Center" and Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2) or UserInputService:GetMouseLocation()
    local fovRadius = GunSilent.Settings.FOV.Value
    local worldRadius = math.tan(math.rad(fovRadius / 2)) * 10
    GunSilent.State.FovCircle.Size = Vector3.new(0.1, worldRadius * 2, worldRadius * 2)
    GunSilent.State.FovCircle.CFrame = CFrame.new(camera.CFrame.Position + camera.CFrame.LookVector * 10) * CFrame.Angles(math.rad(90), 0, 0)
end

local lastToolCheckTime = 0
local toolCheckInterval = 0.2

local function checkToolChange()
    local currentTime = tick()
    if currentTime - lastToolCheckTime < toolCheckInterval then return end
    lastToolCheckTime = currentTime

    local currentTool = nil
    if GunSilent.State.LocalCharacter then
        for _, child in pairs(GunSilent.State.LocalCharacter:GetChildren()) do
            if child:IsA("Tool") and isGunTool(child) then
                currentTool = child
                break
            end
        end
    end

    if currentTool ~= GunSilent.State.LastTool then
        if currentTool and not GunSilent.State.LastTool then
            local range = getGunRange(currentTool)
            local bulletSpeed = getBulletSpeed(currentTool)
            safeNotify(GunSilent.notify, "GunSilent", string.format("Equipped: %s (Range: %d, Bullet Speed: %d)", currentTool.Name, range, bulletSpeed), true)
        elseif GunSilent.State.LastTool and not currentTool then
            safeNotify(GunSilent.notify, "GunSilent", "Unequipped: " .. GunSilent.State.LastTool.Name, true)
            GunSilent.Core.GunSilentTarget.CurrentTarget = nil
        elseif currentTool and GunSilent.State.LastTool then
            local oldRange = getGunRange(GunSilent.State.LastTool)
            local newRange = getGunRange(currentTool)
            local oldBulletSpeed = getBulletSpeed(GunSilent.State.LastTool)
            local newBulletSpeed = getBulletSpeed(currentTool)
            safeNotify(GunSilent.notify, "GunSilent", string.format("Switched from %s (Range: %d, Speed: %d) to %s (Range: %d, Speed: %d)", 
                GunSilent.State.LastTool.Name, oldRange, oldBulletSpeed, currentTool.Name, newRange, newBulletSpeed), true)
        end
        GunSilent.State.LastTool = currentTool
    end
end

local function initializeGunSilent()
    local Remotes = game:GetService("ReplicatedStorage"):FindFirstChild("Remotes")
    if not Remotes then
        safeNotify(GunSilent.notify, "GunSilent", "Error: Remotes not found in ReplicatedStorage", true)
        return
    end

    local SendRemote = Remotes:FindFirstChild("Send")
    if not SendRemote then
        safeNotify(GunSilent.notify, "GunSilent", "Error: Send remote not found in ReplicatedStorage.Remotes", true)
        return
    end

    for _, obj in pairs(getgc(true)) do
        if type(obj) == "table" and not getmetatable(obj) and obj.event and obj.func and type(obj.event) == "number" and type(obj.func) == "number" then
            GunSilent.State.V_U_4 = obj
            break
        end
    end

    if not GunSilent.State.V_U_4 then
        safeNotify(GunSilent.notify, "GunSilent", "Error: Failed to find event table for ID bypass", true)
    end

    if not GunSilent.State.OldFireServer then
        GunSilent.State.OldFireServer = hookfunction(SendRemote.FireServer, function(self, ...)
            local args = {...}
            if GunSilent.Settings.Enabled.Value and #args >= 2 and typeof(args[1]) == "number" then
                GunSilent.State.LastEventId = args[1]
                local equippedTool = GunSilent.State.LastTool
                if equippedTool and (args[2] == "fire_bullet" or (GunSilent.Settings.ShotgunSupport.Value and args[2] == "fire_shotgun")) then
                    local gunRange = getGunRange(equippedTool)
                    local nearestPlayer = getNearestPlayer(gunRange)
                    if nearestPlayer then
                        local friendsList = GunSilent.Core.Services.FriendsList or {}
                        local playerName = nearestPlayer.Name:lower()
                        if friendsList[playerName] then return GunSilent.State.OldFireServer(self, ...) end

                        local bulletSpeed = getBulletSpeed(equippedTool)
                        local predictedPos, direction = predictTargetPosition(nearestPlayer, bulletSpeed)
                        if predictedPos and direction then
                            if GunSilent.Settings.HitChance.Value < 100 and math.random(1, 100) > GunSilent.Settings.HitChance.Value then
                                return GunSilent.State.OldFireServer(self, ...)
                            end

                            local hitPart = nearestPlayer.Character:FindFirstChild(GunSilent.Settings.HitPart.Value) or nearestPlayer.Character.HumanoidRootPart
                            args[3] = equippedTool
                            args[4] = hitPart.Position
                            args[5] = direction

                            if GunSilent.Settings.ShotgunSupport.Value and args[2] == "fire_shotgun" then
                                args[6] = {}
                                for i = 1, 8 do
                                    args[6][i] = {direction, hitPart.Position}
                                end
                            end

                            if GunSilent.Settings.TestGenBullet.Value then
                                for i = 1, GunSilent.Settings.GenBullet.Value do
                                    local newArgs = {args[1] + i, args[2], args[3], args[4], args[5]}
                                    if args[6] then newArgs[6] = args[6] end
                                    GunSilent.State.OldFireServer(self, unpack(newArgs))
                                end
                            end

                            createBulletTrail(GunSilent.State.LocalRoot.Position, hitPart.Position)
                        end
                    end
                end
            end
            return GunSilent.State.OldFireServer(self, unpack(args))
        end)
    end

    if GunSilent.State.Connection then
        GunSilent.State.Connection:Disconnect()
        GunSilent.State.Connection = nil
    end

    GunSilent.State.Connection = RunService.Heartbeat:Connect(function()
        if not GunSilent.Settings.Enabled.Value then
            GunSilent.Core.GunSilentTarget.CurrentTarget = nil
            if GunSilent.State.PredictVisualPart then GunSilent.State.PredictVisualPart:Destroy() GunSilent.State.PredictVisualPart = nil end
            if GunSilent.State.TrajectoryBeam then GunSilent.State.TrajectoryBeam:Destroy() GunSilent.State.TrajectoryBeam = nil end
            if GunSilent.State.TrajectoryAttachment0 then GunSilent.State.TrajectoryAttachment0:Destroy() GunSilent.State.TrajectoryAttachment0 = nil end
            if GunSilent.State.TrajectoryAttachment1 then GunSilent.State.TrajectoryAttachment1:Destroy() GunSilent.State.TrajectoryAttachment1 = nil end
            return
        end

        checkToolChange()
        updateFovCircle()

        if GunSilent.State.LocalCharacter and GunSilent.State.LocalRoot then
            local equippedTool = GunSilent.State.LastTool
            if equippedTool then
                local gunRange = getGunRange(equippedTool)
                local nearestPlayer = getNearestPlayer(gunRange)
                if nearestPlayer then
                    local friendsList = GunSilent.Core.Services.FriendsList or {}
                    local playerName = nearestPlayer.Name:lower()
                    if friendsList[playerName] then
                        GunSilent.Core.GunSilentTarget.CurrentTarget = nil
                        return
                    end

                    local bulletSpeed = getBulletSpeed(equippedTool)
                    local predictedPos, direction = predictTargetPosition(nearestPlayer, bulletSpeed)
                    updateVisuals(nearestPlayer, predictedPos, direction)

                    if predictedPos and direction and GunSilent.State.V_U_4 then
                        GunSilent.State.LastTargetPos = predictedPos
                        GunSilent.State.LastPredictionPos = predictedPos
                        GunSilent.State.LastTargetUpdate = tick()
                    end
                else
                    GunSilent.Core.GunSilentTarget.CurrentTarget = nil
                    if GunSilent.State.PredictVisualPart then GunSilent.State.PredictVisualPart:Destroy() GunSilent.State.PredictVisualPart = nil end
                    if GunSilent.State.TrajectoryBeam then GunSilent.State.TrajectoryBeam:Destroy() GunSilent.State.TrajectoryBeam = nil end
                    if GunSilent.State.TrajectoryAttachment0 then GunSilent.State.TrajectoryAttachment0:Destroy() GunSilent.State.TrajectoryAttachment0 = nil end
                    if GunSilent.State.TrajectoryAttachment1 then GunSilent.State.TrajectoryAttachment1:Destroy() GunSilent.State.TrajectoryAttachment1 = nil end
                end
            end
        end
    end)
end

local function setupUI(UI)
    if not UI or not UI.Sections then return end

    if UI.Sections.GunSilent then
        UI.Sections.GunSilent:Header({ Name = "GunSilent" })
        UI.Sections.GunSilent:Toggle({
            Name = "Enabled",
            Default = GunSilent.Settings.Enabled.Default,
            Callback = function(value)
                GunSilent.Settings.Enabled.Value = value
                initializeGunSilent()
                safeNotify(GunSilent.notify, "GunSilent", "GunSilent " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Range Plus",
            Default = GunSilent.Settings.RangePlus.Default,
            Minimum = 0,
            Maximum = 1000,
            DisplayMethod = "Value",
            Precision = 0,
            Callback = function(value)
                GunSilent.Settings.RangePlus.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Range Plus set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Dropdown({
            Name = "Hit Part",
            Default = GunSilent.Settings.HitPart.Default,
            Options = {"Head", "HumanoidRootPart"},
            Callback = function(value)
                GunSilent.Settings.HitPart.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Hit Part set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Bullet Speed",
            Default = GunSilent.Settings.BulletSpeed.Default,
            Minimum = 500,
            Maximum = 5000,
            DisplayMethod = "Value",
            Precision = 0,
            Callback = function(value)
                GunSilent.Settings.BulletSpeed.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Bullet Speed set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Toggle({
            Name = "Use FOV",
            Default = GunSilent.Settings.UseFOV.Default,
            Callback = function(value)
                GunSilent.Settings.UseFOV.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Use FOV " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "FOV Radius",
            Default = GunSilent.Settings.FOV.Default,
            Minimum = 10,
            Maximum = 360,
            DisplayMethod = "Value",
            Precision = 0,
            Callback = function(value)
                GunSilent.Settings.FOV.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "FOV Radius set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Toggle({
            Name = "Show FOV Circle",
            Default = GunSilent.Settings.ShowCircle.Default,
            Callback = function(value)
                GunSilent.Settings.ShowCircle.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Show FOV Circle " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Dropdown({
            Name = "Circle Method",
            Default = GunSilent.Settings.CircleMethod.Default,
            Options = GunSilent.Settings.CircleMethod.Options,
            Callback = function(value)
                GunSilent.Settings.CircleMethod.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Circle Method set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Toggle({
            Name = "Predict Visual",
            Default = GunSilent.Settings.PredictVisual.Default,
            Callback = function(value)
                GunSilent.Settings.PredictVisual.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Predict Visual " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Toggle({
            Name = "Trajectory Beam",
            Default = GunSilent.Settings.TrajectoryBeam.Default,
            Callback = function(value)
                GunSilent.Settings.TrajectoryBeam.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Trajectory Beam " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Toggle({
            Name = "Bullet Trails",
            Default = GunSilent.Settings.BulletTrailsEnabled.Default,
            Callback = function(value)
                GunSilent.Settings.BulletTrailsEnabled.Value = value
                if not value then
                    for _, trail in pairs(GunSilent.State.BulletTrails) do
                        trail:Destroy()
                    end
                    for _, connection in pairs(GunSilent.State.TrailFadeConnections) do
                        connection:Disconnect()
                    end
                    GunSilent.State.BulletTrails = {}
                    GunSilent.State.TrailFadeConnections = {}
                end
                safeNotify(GunSilent.notify, "GunSilent", "Bullet Trails " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Bullet Trails Fade Time",
            Default = GunSilent.Settings.BulletTrailsFadeTime.Default,
            Minimum = 0.1,
            Maximum = 5,
            DisplayMethod = "Value",
            Precision = 1,
            Callback = function(value)
                GunSilent.Settings.BulletTrailsFadeTime.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Bullet Trails Fade Time set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Colorpicker({
            Name = "Bullet Trails Color",
            Default = GunSilent.Settings.BulletTrailsColor.Default,
            Callback = function(value)
                GunSilent.Settings.BulletTrailsColor.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Bullet Trails Color updated", true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Hit Chance",
            Default = GunSilent.Settings.HitChance.Default,
            Minimum = 0,
            Maximum = 100,
            DisplayMethod = "Percent",
            Precision = 0,
            Callback = function(value)
                GunSilent.Settings.HitChance.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Hit Chance set to: " .. value .. "%", true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Prediction Strength",
            Default = GunSilent.Settings.PredictionStrength.Default,
            Minimum = 0.1,
            Maximum = 5,
            DisplayMethod = "Value",
            Precision = 1,
            Callback = function(value)
                GunSilent.Settings.PredictionStrength.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Prediction Strength set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Ping Compensation (ms)",
            Default = GunSilent.Settings.PingCompensation.Default * 1000,
            Minimum = 0,
            Maximum = 500,
            DisplayMethod = "Value",
            Precision = 0,
            Callback = function(value)
                GunSilent.Settings.PingCompensation.Value = value / 1000
                safeNotify(GunSilent.notify, "GunSilent", "Ping Compensation set to: " .. value .. " ms", true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Smoothing Factor",
            Default = GunSilent.Settings.SmoothingFactor.Default,
            Minimum = 0,
            Maximum = 1,
            DisplayMethod = "Value",
            Precision = 2,
            Callback = function(value)
                GunSilent.Settings.SmoothingFactor.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Smoothing Factor set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Toggle({
            Name = "Resolver",
            Default = GunSilent.Settings.ResolverEnabled.Default,
            Callback = function(value)
                GunSilent.Settings.ResolverEnabled.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Resolver " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Resolver Threshold",
            Default = GunSilent.Settings.ResolverThreshold.Default,
            Minimum = 0.1,
            Maximum = 1,
            DisplayMethod = "Value",
            Precision = 2,
            Callback = function(value)
                GunSilent.Settings.ResolverThreshold.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Resolver Threshold set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Position History Size",
            Default = GunSilent.Settings.PositionHistorySize.Default,
            Minimum = 5,
            Maximum = 50,
            DisplayMethod = "Value",
            Precision = 0,
            Callback = function(value)
                GunSilent.Settings.PositionHistorySize.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Position History Size set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Dropdown({
            Name = "Sort Method",
            Default = GunSilent.Settings.SortMethod.Default,
            Options = {"Distance", "Mouse&Distance"},
            Callback = function(value)
                GunSilent.Settings.SortMethod.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Sort Method set to: " .. value, true)
            end
        })
        UI.Sections.GunSilent:Toggle({
            Name = "Shotgun Support",
            Default = GunSilent.Settings.ShotgunSupport.Default,
            Callback = function(value)
                GunSilent.Settings.ShotgunSupport.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Shotgun Support " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Toggle({
            Name = "Test Generate Bullet",
            Default = GunSilent.Settings.TestGenBullet.Default,
            Callback = function(value)
                GunSilent.Settings.TestGenBullet.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Test Generate Bullet " .. (value and "Enabled" or "Disabled"), true)
            end
        })
        UI.Sections.GunSilent:Slider({
            Name = "Generate Bullet Amount",
            Default = GunSilent.Settings.GenBullet.Default,
            Minimum = 1,
            Maximum = 10,
            DisplayMethod = "Value",
            Precision = 0,
            Callback = function(value)
                GunSilent.Settings.GenBullet.Value = value
                safeNotify(GunSilent.notify, "GunSilent", "Generate Bullet Amount set to: " .. value, true)
            end
        })
    end
end

local function Init(ui, core, notificationFunc)
    UI = ui
    GunSilent.Core = core
    GunSilent.notify = notificationFunc

    local LocalPlayer = GunSilent.Core.PlayerData.LocalPlayer
    if LocalPlayer then
        LocalPlayer.CharacterAdded:Connect(function(character)
            character:WaitForChild("HumanoidRootPart")
            GunSilent.State.LocalCharacter = character
            GunSilent.State.LocalRoot = character.HumanoidRootPart
            GunSilent.State.LastTool = nil
            GunSilent.Core.GunSilentTarget.CurrentTarget = nil
            if GunSilent.State.PredictVisualPart then GunSilent.State.PredictVisualPart:Destroy() GunSilent.State.PredictVisualPart = nil end
            if GunSilent.State.TrajectoryBeam then GunSilent.State.TrajectoryBeam:Destroy() GunSilent.State.TrajectoryBeam = nil end
            if GunSilent.State.TrajectoryAttachment0 then GunSilent.State.TrajectoryAttachment0:Destroy() GunSilent.State.TrajectoryAttachment0 = nil end
            if GunSilent.State.TrajectoryAttachment1 then GunSilent.State.TrajectoryAttachment1:Destroy() GunSilent.State.TrajectoryAttachment1 = nil end
            for _, trail in pairs(GunSilent.State.BulletTrails) do trail:Destroy() end
            for _, connection in pairs(GunSilent.State.TrailFadeConnections) do connection:Disconnect() end
            GunSilent.State.BulletTrails = {}
            GunSilent.State.TrailFadeConnections = {}
        end)
        if LocalPlayer.Character then
            GunSilent.State.LocalCharacter = LocalPlayer.Character
            GunSilent.State.LocalRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        end
    end

    if UI and UI.Tabs and UI.Tabs.Combat then
        UI.Sections.GunSilent = UI.Tabs.Combat:Section({ Name = "GunSilent", Side = "Left" })
    end

    setupUI(UI)
    initializeGunSilent()
end

return {
    Init = Init
}
