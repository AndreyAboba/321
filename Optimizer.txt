local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local SoundService = game:GetService("SoundService")
local MaterialService = game:GetService("MaterialService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Функция для безопасного удаления указанных объектов
local function removeSpecificObjects()
    if not Workspace then return end

    local map = Workspace:FindFirstChild("Map")

    local objectsToRemove = {
        "Bowling pin",
        "Dumbell Plate",
        "Jerry can",
        "Soda can",
        "Spray can"
    }

    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj ~= LocalPlayer.Character and not obj:IsDescendantOf(LocalPlayer.Character) then
            for _, name in pairs(objectsToRemove) do
                if string.find(obj.Name:lower(), name:lower()) then
                    obj:Destroy()
                    break
                end
            end
        end
    end

    Workspace.ChildAdded:Connect(function(child)
        if child ~= LocalPlayer.Character and not child:IsDescendantOf(LocalPlayer.Character) then
            for _, name in pairs(objectsToRemove) do
                if string.find(child.Name:lower(), name:lower()) then
                    child:Destroy()
                    break
                end
            end
        end
    end)

    if map then
        local mapObjectsToRemove = {
            {parent = map, name = "FakeMap"},
            {parent = map, name = "Vegetation"},
            {parent = map:FindFirstChild("RoadNetwork"), name = "StreetSigns"},
            {parent = map, name = "NPCs"}
        }

        for _, target in pairs(mapObjectsToRemove) do
            local parent = target.parent
            local name = target.name
            if parent then
                local obj = parent:FindFirstChild(name)
                if obj then
                    obj:Destroy()
                end
            end
        end
    end
end

-- Функция для очистки MaterialService
local function clearMaterialService()
    if not MaterialService then return end

    for _, material in pairs(MaterialService:GetChildren()) do
        material:Destroy()
    end
    pcall(function()
        MaterialService:ClearAllChildren()
    end)
end

-- Функция для оптимизации машин в Workspace.Vehicles
local function optimizeVehicles()
    if not Workspace then return end

    local vehicles = Workspace:FindFirstChild("Vehicles")
    if not vehicles then return end

    for _, vehicle in pairs(vehicles:GetDescendants()) do
        if vehicle:IsA("BasePart") then
            vehicle.CastShadow = false
            vehicle.Material = Enum.Material.Plastic
            if not vehicle.Anchored then
                vehicle.CanCollide = false
            end
        elseif vehicle:IsA("Texture") or vehicle:IsA("Decal") then
            vehicle:Destroy()
        elseif vehicle:IsA("ParticleEmitter") then
            vehicle.Enabled = false
        end
    end
end

-- Функция для оптимизации частиц
local function optimizeParticles()
    if not Workspace then return end

    for _, particle in pairs(Workspace:GetDescendants()) do
        if particle:IsA("ParticleEmitter") then
            particle.Rate = math.max(1, particle.Rate * 0.5)
            particle.Speed = NumberRange.new(particle.Speed.Min * 0.5, particle.Speed.Max * 0.5)
            particle.Lifetime = NumberRange.new(particle.Lifetime.Min * 0.5, particle.Lifetime.Max * 0.5)
        end
    end
end

-- Функция для сжатия текстур
local function compressTextures()
    pcall(function()
        setfflag("RenderTextureQuality", "0")
    end)
    if not Workspace then return end

    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Texture") or obj:IsA("Decal") then
            obj:Destroy()
        end
    end
end

-- Функция для проверки и восстановления персонажа
local function restoreCharacter()
    if not LocalPlayer then return end

    if not LocalPlayer.Character or not LocalPlayer.Character.Parent then
        LocalPlayer.CharacterAdded:Wait()
    end
end

-- Инициализация модуля с Toggle
return {
    Init = function(UI, Core, notify)
        if not UI or not UI.Tabs or not UI.Tabs.Misc then
            if notify then
                notify("Optimizer Error", "Misc tab not found! Optimizer failed to initialize.", true)
            end
            return
        end

        local MiscTab = UI.Tabs.Misc
        local OptimizerSection = MiscTab:Section({ Name = "Optimizer", Side = "Right" })

        -- Переменные для отслеживания состояния Toggle
        local isFastFlagEnabled = false
        local isRenderEnabled = false
        local isTrashRemoveEnabled = false

        -- FastFlag Toggle
        OptimizerSection:Header({ Name = "FastFlag" })
        OptimizerSection:Toggle({
            Name = "Enable FastFlag",
            Default = false,
            Callback = function(value)
                isFastFlagEnabled = value
                if value then
                    pcall(function() setfflag("RenderShadows", "False") end)
                    pcall(function() setfflag("RenderTextureQuality", "0") end)
                    pcall(function() setfflag("RenderPostProcessing", "False") end)
                    pcall(function() setfflag("RenderDistance", "500") end)
                    pcall(function() setfflag("RenderParticles", "False") end)
                    pcall(function() setfflag("RenderLightingQuality", "1") end)
                    pcall(function() setfflag("PhysicsFPS", "25") end)
                    pcall(function() setfflag("PhysicsPrecision", "Low") end)
                    pcall(function() setfflag("NetworkMaxSendRate", "30") end)
                    pcall(function() setfflag("TaskSchedulerTargetFps", "30") end)
                    pcall(function() setfflag("RenderVSync", "False") end)
                    notify("Optimizer", "FastFlag optimizations enabled!", true)
                else
                    notify("Optimizer", "FastFlag optimizations disabled!", true)
                end
            end
        }, "FastFlagToggle")

        -- Render Toggle
        OptimizerSection:Header({ Name = "Render" })
        OptimizerSection:Toggle({
            Name = "Enable Render",
            Default = false,
            Callback = function(value)
                isRenderEnabled = value
                if value then
                    if Lighting then
                        Lighting.GlobalShadows = false
                        Lighting.FogEnd = 100000
                        Lighting.Brightness = 1
                    end
                    if SoundService then
                        SoundService:ClearAllChildren()
                    end
                    optimizeParticles()
                    compressTextures()
                    notify("Optimizer", "Render optimizations enabled!", true)
                else
                    notify("Optimizer", "Render optimizations disabled!", true)
                end
            end
        }, "RenderToggle")

        -- TrashRemove Toggle
        OptimizerSection:Header({ Name = "TrashRemove" })
        OptimizerSection:Toggle({
            Name = "Enable TrashRemove",
            Default = false,
            Callback = function(value)
                isTrashRemoveEnabled = value
                if value then
                    removeSpecificObjects()
                    clearMaterialService()
                    optimizeVehicles()
                    restoreCharacter()
                    notify("Optimizer", "TrashRemove optimizations enabled!", true)
                else
                    notify("Optimizer", "TrashRemove optimizations disabled!", true)
                end
            end
        }, "TrashRemoveToggle")
    end
}
